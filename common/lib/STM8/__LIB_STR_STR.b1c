IMP,__LIB_MEM_ALC

; converts 16-bit integer value to string
; X - integer value, stack1 (byte) - flags (bit 0 - signed value, b1t 1 - add spaces), returns string address in X
:__LIB_STR_STR
ASM
LD A, (__RET_ADDR_SIZE + 1, SP) ; load flags
BCP A, 0x1
JREQ ::__LBL_POS_VAL
; signed int
AND A, 0x2
TNZW X
JRPL ::__LBL_POS_VAL
; negative value
OR A, 0x1
NEGW X

:::__LBL_POS_VAL
; here A - flags (bit 0 - negative value, bit 1 - add spaces)
; add trailing space if necessary
EXGW X, Y
CLRW X
BCP A, 0x2
JREQ ::__LBL_CVT
PUSH 32
INCW X

:::__LBL_CVT
LD XH, A

:::__LBL_DIV_LOOP
LD A, 10
DIV Y, A
ADD A, 48 ; '0'
PUSH A
INCW X
TNZW Y
JRNE ::__LBL_DIV_LOOP
; here XH - flags, XL - string length
; add leading space of minus sign id necessary
LD A, XH
SRL A
JRNC ::__LBL_NO_MINUS
PUSH 45 ; '-'
INCW X
JRA ::__LBL_ALC_MEM

:::__LBL_NO_MINUS
SRL A
JRNC ::__LBL_ALC_MEM
PUSH 32
INCW X

:::__LBL_ALC_MEM
LD A, XL
PUSH A
ADD A, 2
CLRW X
LD XL, A
CALLR __LIB_MEM_ALC
TNZW X
JRNE ::__LBL_ALC_OK
PUSH 0
LDW X, SP
ADDW X, (1, SP)
LDW SP, X
POPW X
CLRW X
RET

:::__LBL_ALC_OK
LD A, 1
LD (X), A ; string usage counter
INCW X
POP A
LD (X), A ; string length
INCW X
LD YH, A

:::__LBL_CPY_LOOP
LD YL, A
POP A
LD (X), A
INCW X
LD A, YL
DEC A
JRNE ::__LBL_CPY_LOOP
LD A, YH
ADD A, 2
PUSH A
PUSH 0
SUBW X, (1, SP)
ADDW SP, 2
RET
ENDASM