INI,__INI_MEM
IMP,__LIB_MEM_ALC
IMP,__LIB_MEM_CPY
IMP,__LIB_MEM_FRE

; reallocates memory block
; X - memory block address, stack1 - new block size, returns new block address in X
:__LIB_MEM_RLC
ASM
TNZW X
JRNE ::__LBL_DO_RLC
LDW X, (__RET_ADDR_SIZE + 1, SP)
CALLR __LIB_MEM_ALC
RET

:::__LBL_DO_RLC
PUSHW X ; curr_blk (1)
;curr_size = *(((unsigned short *)curr_blk) - 1) & 0x7FFF;
DECW X
DECW X
LDW X, (X)
SLLW X
SRLW X
PUSHW X ; curr_size (1), curr_blk (3)

; if(new_size == 0)
LDW Y, (__RET_ADDR_SIZE + 5, SP)
JRNE ::__NON_ZERO_NEW_SIZE
CLRW X
JRA ::__LBL_FRE_EXIT

:::__NON_ZERO_NEW_SIZE
SUBW X, (__RET_ADDR_SIZE + 5, SP) ; delta
JRMI ::__LBL_INC_BLOCK
; new_size <= curr_size, just reuse the current block
LDW Y, (1, SP) ; curr_size

; correct existing block(-s)
:::__LBL_CORRECT_EXISTING
DECW X
DECW X
JRMI ::__LBL_CORRECT_CURR_BLK
EXGW X, Y ; Y = delta - 2
LDW X, (3, SP)
ADDW X, (__RET_ADDR_SIZE + 5, SP) ; curr_blk + new_size
LDW (X), Y
LDW Y, (__RET_ADDR_SIZE + 5, SP) ; Y = new_size

:::__LBL_CORRECT_CURR_BLK
ADDW Y, 0x8000
LDW X, (3, SP)
DECW X
DECW X
LDW (X), Y
POPW X
POPW X
RET

:::__LBL_INC_BLOCK
EXGW X, Y ; save delta
LDW X, (3, SP) ; curr_blk
ADDW X, (1, SP) ; curr_size
CPW X, __HEAP_START + __HEAP_SIZE
JREQ ::__LBL_ALLOC_NEW
LDW X, (X)
JRMI ::__LBL_ALLOC_NEW
PUSHW X ; save next_size
ADDW Y, (1, SP) ; delta += next_size
LDW X, Y
INCW X
INCW X
POPW Y ; restore next_size
JRMI ::__LBL_ALLOC_NEW
ADDW Y, (1, SP)
ADDW Y, 2
JRA ::__LBL_CORRECT_EXISTING

:::__LBL_ALLOC_NEW
LDW X, (__RET_ADDR_SIZE + 5, SP) ; new_size
CALLR __LIB_MEM_ALC
TNZW X
JREQ ::__LBL_EXIT
EXGW X, Y
LDW X, (3, SP)
PUSHW X
LDW X, (3, SP)
PUSHW X
EXGW X, Y
CALLR __LIB_MEM_CPY
ADDW SP, 4

:::__LBL_FRE_EXIT
PUSHW X
LDW X, (5, SP)
CALLR __LIB_MEM_FRE
POPW X

:::__LBL_EXIT
ADDW SP, 4
RET
ENDASM